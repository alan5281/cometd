section of the [BayeuxCometdDocumentation Bayeux Cometd Documentation].

= Bayeux Chat Example =

Chat is the "hello world" of web-2.0. This page describes how Bayeux can be used to implement a basic and more advanced chat room.

= Basic Chat =

With a basic chat, all users in the same "room" see all the chat published by all other users.  This has an almost 1:1 correlation with how a Bayeux channel works, so it is very simple to create a basic chat room:

  * Pick a Cometd server (eg Jetty )
  * Pick a cometd client library (eg dojotoolkit)
  * Create a webapplications that includes the cometd servlet and can server the client library. 
  * Pick a channel name for your chat room: "/chat/demo"
  * Write client javascript that initializes cometd 
{{{
dojox.cometd.init("http://myhost/mycontext/cometd");
}}}
  * Write client javascript that listens for chat in "/chat/demo"
{{{
var room = {
  _username: "myuser",
  _chat: function(message){
    var from=message.data.user;
    var text=message.data.chat;
    // do something with chat
   }
dojox.cometd.subscribe("/chat/demo", room, "_chat");
}}}
  * Write client javascript to tell the room you have joined:
{{{
dojox.cometd.publish("/chat/demo", { user: room._username, join:true, chat : room._user
name+" has joined"});
}}}
  * Write client javascript to publish anything typed by the user
{{{    
chat: function(text){
  dojox.cometd.publish("/chat/demo", { user: room._username, chat: text});
},
}}}

and that's it.  No server side code is required as messages published by clients on a channel ("room") are by default broadcast to all subscribers the that channel ("room").

This example can be seen as part of the  [http://svn.codehaus.org/jetty-contrib/jetty/tags/jetty-6.1.7/contrib/cometd/demo/src/main/webapp/examples/chat/ cometd demo]'s 

= User List =

But a basic chat room is not very functional.  Most reasonable chat rooms will provide a list of users that are currently in the room that will be updated as users join and leave.

== Client side user list ==

It is possible to maintain a list of users without implementing any server side code. Each client simply needs to watch for join messages and publish an empty message in response:
{{{
  _chat: function(message){
    var from=message.data.user;
    var text=message.data.chat;
    if (message.data.join) {
      dojox.cometd.publish("/chat/demo", { user: room._username});
    }
    updateUserList(from);
    if (text) {
      // do something with chat
    }
  }
}}}
Thus soon after joining, every client will receive a message from every other client in the room, and thus will be able to update their list of members.  A similar technique can be done with leave messages to remove users from the members list.

While this mechanism works, it is not optimal as:
  * The emtpy messages are needed only by the newly joining client, but they are published to the channel and thus delivered to every client. This wastes bandwidth and causes unnecessary server activity.
  * The member messages will not arrive at once, so the member list will visibly be updated many times.
  * The mechanism is not reliable for leaving, as some clients my silently be disconnected.

== Server side user list ==
If the chat room member list is maintained on the server side, then the server can send a list of existing members to each new client as they join the list.

Using the proposed java API, this can be done as follows:
{{{        
        Bayeux bayeux=(Bayeux)servletContext.getAttribute(Bayeux.DOJOX_COMETD_BAYEUX);
        Client client = bayeux.newClient("chat");
        final ConcurrentMap<String,Set<String>> members = new ConcurrentHashMap<String,Set<String>>();
        
        client.addListener(new MessageListener(){
            public void deliver(Client joiner, Client client, Message msg)
            {
                String channel=msg.getChannel();
                Map<?,?> data = (Map<?,?>)msg.getData();
                
                if (Boolean.TRUE.equals(data.get("join")))
                {
                    Set<String> tmp = members.get(channel);
                    if (tmp==null)
                    {
                        Set<String> new_list=new CopyOnWriteArraySet<String>();
                        tmp=members.putIfAbsent(channel,new_list);
                        if (tmp==null)
                            tmp=new_list;
                    }
                    
                    final Set<String> members=tmp;
                    final String username=(String)data.get("user");
                    
                    members.add(username);
                    joiner.addListener(new RemoveListener(){
                        public void removed(String clientId, boolean timeout)
                        {
                            members.remove(username);
                        }
                    });
                    
                    joiner.deliver(client,channel,members,msg.getId());
                }
            }
        });
        
        bayeux.getChannel("/chat/**",true).subscribe(client);
        
}}}


= Private Messages =

= Security and Validation =

----
[BayeuxCometdDocumentation prev] [BayeuxCometdDocumentation up] [BayeuxCometdDocumentation next]
----